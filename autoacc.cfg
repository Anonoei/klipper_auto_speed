# Description:
# This tool modifies Gcode files to use optimal acceleration for each individual movement speed during printing.
# Since different accelerations are technically possible at different speeds, it adjusts the acceleration for each speed
# so that the printer's capabilities are not exceeded, and no time is lost due to low acceleration values.
# This results in a much faster workflow, and layer shifts are eliminated.

# Operation of the Tool:
# The tool uses a table of speed-to-acceleration dependencies.
# These values are initially determined (if needed) through a script.
# The tool examines the Gcode, sets interpolated acceleration values based on the table for
# found speed values, and creates a replacement file used for the actual print.

# Dependencies:
# To use the tool, the following criteria must be met:
# 1. Installed Gcode_Shell_Command Plugin https://github.com/dw-0/kiauh/blob/master/docs/gcode_shell_command.md
# If needed, independent X and Y acceleration values:
# 2. Limited Cartesian: https://github.com/Piezoid/klipper/blob/work-peraxis/klippy/kinematics/limited_cartesian.py
# German workaround for LC: https://book.cryd.de/books/klipper/page/youtube-unabhangige-beschleunigungswerte-fur-x-und-y

# Usage:
# Copy the "Autoacc" folder to the directory "/home/pi/printer_data/config/scripts"
# Include this script in your printer.cfg ([include scripts/Autoacc/autoacc.cfg])

# Before starting a print, you must create the necessary table by determining your possible values at different speeds.
# I recommend using, for example, "https://github.com/cryd-s/klipper_scripts/tree/main/speed_accel_script"
# Caution: This macro pushes your printer to its limits. Use at your own risk.
# This will take some time. The more values you determine, the more accurate the results will be.
# I personally determine an excessively slow and an excessively fast value, and then I determine as many values as possible
# in the realistic print speed range.
# At the end of this .cfg file, enter your determined values in ascending speed order.
# You can repeat this if needed, for example, due to changes in hardware or similar.

# For printers with independent X and Y accelerations (Limited Cartesian), use the following example format "#*# 270,200000,100000"
# The "#*#" must be retained. 270 is the movement speed in mm/s, 200000 is the maximum acceleration value for the X-axis,
# and 100000 is the maximum acceleration value for the Y-axis.
# For printers with the same X and Y accelerations, use the following example format "#*# 270,200000"
# The "#*#" must be retained. 270 is the movement speed in mm/s, 200000 is the maximum acceleration value for both X and Y axes.

# Since the values you have determined are maximum values that move at the upper limit, it is advisable to soften them somewhat percentage-wise,
# to avoid generating any layer shifts in the middle of the print.
# You can define this in the line "#*# Factor in %:90".
# Here, 90 represents 90%. In other words, a determined acceleration value of 100,000 will be limited to 90,000 in the Gcode.

# From now on, all prints will be done with the modified Gcode.
# If you define acceleration values in the slicer that are below your maximum values, the print will also use the lower values.
# If you enter unrealistically high values in the slicer, the acceleration values will be limited to your determined values, and your printer will operate
# at the limit of the acceleration values.

# Thanks:
# First and foremost, a big thank you to Fragmon, whose original script sparked the idea for this.
# Also, thanks to LastZeanon and Robin for providing valuable tips and assistance.
# Special thanks to the entire Cryd team. Through your work, you make an incredibly valuable contribution
# to every individual 3D printing enthusiast and push the community and the topic of 3D printing forward in great strides.
# Not to forget and involved at important stages:
# why_me
# .
# .
# .



#Beschreibung:
#Dieses Tool modifiziert zu druckende Gcode Dateien um bei jeder individuellen Bewegungsgeschwindigkeit die optimale Beschleunigung zu verwenden.
#Da technisch bei unterschiedlichen Geschwindigkeiten unterschiedliche Beschleunigungen möglich sind passt es zu jeder einzelnen Geschwindigkeit 
#die Beschleunigung so an das die Möglichkeiten des Druckers nicht überschritten werden, aber auch keine Zeit verloren geht durch zu niedrige
#Beschleunigungswerte. Dadurch erhält man einen viel schnelleren Ablauf und Layershifts werden ausgeschlossen.

#Arbeitsweise des Tools:
#Das Tool verwendet eine Tabelle von Geschwindigkeit zu Beschleunigungsabhängigkeiten.
#Diese Werte werden initial einmalig (bei Bedarf erneut) über ein Script ermittelt.
#Das Tool untersucht den Gcode, setzt anhand der Tabelle interpolierte Beschleunigungswerte zu 
#gefundenen Geschwindigkeitswerten und erstellt eine Ersatzdatei welche für den eigentlichen Druck verwendet wird.

#Abhängigkeiten:
#Um das Tool nutzen zu können müssen folgende Kriterien erfüllt sein:
#1. Installiertes Gcode_Shell_Command Plugin  https://github.com/dw-0/kiauh/blob/master/docs/gcode_shell_command.md
#Bei Bedarf unabhängige X und Y Beschleunigungswerte:
#2. Limited Cartesian:  https://github.com/Piezoid/klipper/blob/work-peraxis/klippy/kinematics/limited_cartesian.py
#   Deutscher Workaround zu LC: https://book.cryd.de/books/klipper/page/youtube-unabhangige-beschleunigungswerte-fur-x-und-y

#Verwendung:
#Kopiere den Ordner "Autoacc" in das Verzeichnis "/home/pi/printer_data/config/scripts"
#Includiere diesen Script in deine printer.cfg  ( [include scripts/Autoacc/autoacc.cfg] )

#Bevor du nun einen Druck startest musst du, um die notwendige Tabelle zu erstellen deine möglichen Werte bei verschiedenen Geschwindigkeiten ermitteln.
#Dazu empfehle ich beispielsweise "https://github.com/cryd-s/klipper_scripts/tree/main/speed_accel_script"
#Achtung: dieses Macro bringt deinen Drucker an seine Belastungsgrenzen. Benutzung auf eigene Gefahr.
#Das wird etwas Zeit in anspruch nehmen. Je mehr Werte Du ermittelst desto genauer sind die Ergebnisse.
#Ich selbst ermittle einen übertrieben langsamen und einen übertrieben schnellen wert, und danach ermittle ich so viele wie möglich Werte
#in dem realistischen Druckgeschwindigkeitsbereich.
#Am Ende dieser .cfg Datei trägst Du deine ermittelten Werte IN AUFSTEIGENDER Geschwindigkeitsreihenfolge ein.
#Dieses kannst du bei Bedarf, beispielsweise Veränderungen an der Hardware oder Ähnliches, erneut ausführen.

#Für Drucker mit unabhängigen X und Y Beschleunigungen (Limited Cartesian) verwende folgende beispielhafte Schreibweise "#*# 270,200000,100000"
#Dabei muss "#*#" beibehalten werden. 270 ist die Bewegungsgeschwindigkeit in mm/s, 200000 der maximale Beschleunigungswert der X Achse
#und 100000 der maximale Beschleunigungswert der Y Achse.
#Für Drucker mit gleichen X und Y Beschleunigungen verwende folgende beispielhafte Schreibweise "#*# 270,200000"
#Dabei muss "#*#" beibehalten werden. 270 ist die Bewegungsgeschwindigkeit in mm/s, 200000 der maximale Beschleunigungswert für X UND Y Achse

#Da die von dir nun ermittelten Werte maximalwerte sind welche sich am obersten Limit bewegen ist es ratsam diese Prozentual etwas ab zu mildern,
#um nicht mitten im Druck doch irgend welche Layershifts zu erzeugen.
#Dies kannst Du in der Zeile "#*# Faktor in %:90 " definieren.
#Hier steht die 90 für 90%. Sprich ein ermittelter Beschleunigungswert von 100.000 wird im Gcode mit 90.000 begrenzt.

#Ab jetzt werden ausnahmslos alle Drucke mit dem modifizierten Gcode gedruckt.
#Wenn Du im Slicer Beschleunigungswerte definierst welche unterhalb deiner maximalen Werte liegen wird auch nur mit den niedrigeren Werten gedruckt.
#Solltest Du im Slicer unrealistisch hohe Werte eingeben werden die Beschleunigungswerte auf deine ermittelten Werte begrenzt und dein Drucker arbeitet
#am Limit der Beschleunigungswerte.

#Danke:
#Als erstes geht ein sehr großes Dankeschön an Fragmon dessen Originalscript die Initailzündung zu dieser Idee war
#Ausserdem an LastZeanon und Robin welche viele wertvolle Tips und Hilfestellung gegeben haben.
#Auch ein besonderer Dank an das gesamte Cryd Team. Durch Eure Arbeit leistet ihr einen unfassbar wertvollen Beitrag
#für jeden einzelnen 3D-Druck Enthusiasten und bringt die Community und das Thema 3D Druck in großen Schritten nach vorne.
#Nicht zu vergessen und an wichtigen Etappen beteiligt:
#why_me
#.
#.
#.



######################################################################################################
####################################  AutoACC  #######################################################
######################################################################################################


##################################### Shellcommand ###################################################

#RUN_SHELL_COMMAND CMD=PARSER_START
 
[gcode_shell_command PARSER_START]
command: python /home/pi/printer_data/config/scripts/Autoacc/gcode_parser.py
timeout: 60.
verbose: True

###################################### Print #####################################################

[gcode_macro SDCARD_PRINT_FILE]
rename_existing: SDCARD_PRINT_FILE_ORIGINAL
gcode:
  {% set file_name = params.FILENAME %}
  {% set gcode_path = "/home/pi/printer_data/gcodes" %}
  {% set new_file_name = file_name|replace(".gcode","") + "_parsed.gcode" %}

  RUN_SHELL_COMMAND CMD=PARSER_START PARAMS="{gcode_path}/{file_name}"
  M400
  M118 Done Parsing

  SDCARD_PRINT_FILE_ORIGINAL FILENAME={new_file_name}

###################################### Values #####################################################

#*# <---------------------- SAVE_VALUES -------------------------->
#*# Faktor in %:90 
#*# Values:
#*# Speed,XAcceleration,YAcceleration
#*# 1,200000
#*# 270,200000
#*# 280,153000
#*# 290,126000
#*# 300,56000
#*# 350,36000
#*# 400,16000
#*# End Values





